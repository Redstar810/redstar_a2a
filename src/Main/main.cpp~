/*!
         @file    main.cpp

         @brief

         @author  Hideo Matsufuru (matsufuru)
                  $LastChangedBy: akahoshi $

         @date    $LastChangedDate:: 2019-01-21 17:06:23 #$

         @version $LastChangedRevision: 1929 $
*/

#include "bridge_setup.h"
#ifdef DEBUG
#include "bridge_init_factory.h"
#endif
#include "Parameters/commonParameters.h"
#include "Parameters/parameters.h"
#include "Parameters/parameterManager_YAML.h"
#include "Tools/timer.h"

//#ifdef USE_TESTMANAGER
//#include "run_testmanager.h"
//#endif

#include "IO/bridgeIO.h"
using Bridge::vout;


const std::string filename_main_input = "main.yaml";
// const std::string filename_main_input = "stdin";

//- prototype declarations
int main_core(Parameters*);

//====================================================================
int main(int argc, char *argv[])
{
  // ###  initial setup  ###
  Bridge::VerboseLevel vl = Bridge::GENERAL;

  //- initialization step one
  bridge_initialize(&argc, &argv);
  
  std::string filename_input = filename_main_input;
  
  if (filename_input == "stdin") {
    vout.general(vl, "input filename : ");
    std::cin >> filename_input;
    vout.general(vl, "%s\n", filename_input.c_str());
  } else {
    vout.general(vl, "input filename : %s\n", filename_input.c_str());
  }
  vout.general(vl, "\n");
  
  //- load input parameters (lattice size, MPI grid, etc...)
  Parameters params_all  = ParameterManager::read(filename_input);
  Parameters params_main = params_all.lookup("Main");

  //- initialization step two: setup using parameter values,
  bridge_setup(params_main);

  if(argc > 1){
  
    //- load input parameters (details specific to each configurations)
    std::string filename_conf(argv[1]); // assume the 1st argument is an input filename
    vout.general("input filename (configuration details) : %s\n",filename_conf.c_str());
    Parameters params_conf_all = ParameterManager::read(filename_conf);
    Parameters params_conf = params_conf_all.lookup("Conf");
    Parameters params_eigen = params_conf_all.lookup("Eigensolver");
    Parameters params_inversion = params_conf_all.lookup("Inversion");

    //- check parameters
    std::string conf_name;
    double Csw, kappa_ud, kappa_s;
    params_conf.fetch_string("confname",conf_name);
    params_conf.fetch_double("csw",Csw);
    params_conf.fetch_double("kappa_ud",kappa_ud);
    params_conf.fetch_double("kappa_s",kappa_s);

    vout.general("confname : %s\n", conf_name.c_str());
    vout.general("kappa_ud = %f\n", kappa_ud);
    vout.general("kappa_s = %f\n", kappa_s);
    vout.general("Csw = %f\n",Csw);

    main_core(&params_conf_all);

  }
  
  #ifdef USE_FACTORY
  #ifdef DEBUG
    bridge_report_factory();
  #endif
  #endif

  //- start timer
  unique_ptr<Timer> timer(new Timer("Main"));
  timer->start();

  //#ifdef USE_TESTMANAGER
  //run_testmanager(argc, argv);
  //#else
  //run_test();
  //#endif



  vout.general("hello. \n");

  for(int n=0;n<argc;n++){
    printf("argv[%d] = %s \n",n,argv[n]);
  }

  //- find total elapsed time
  timer->report();

  //- finalization step
  bridge_finalize();

  return EXIT_SUCCESS;
}


//====================================================================
/*
int main_impl(Parameters *params_conf_all){

  vout.general("===### main_impl ###====\n");

  //- parameter files
  Parameters params_conf = params_conf_all->lookup("Conf");
  Parameters params_eigen = params_conf_all->lookup("Eigensolver");
  Parameters params_inversion = params_conf_all->lookup("Inversion");

  //- check parameters
  std::string conf_name;
  double Csw, kappa_ud, kappa_s;
  params_conf.fetch_string("confname",conf_name);
  params_conf.fetch_double("csw",Csw);
  params_conf.fetch_double("kappa_ud",kappa_ud);
  params_conf.fetch_double("kappa_s",kappa_s);

  vout.general("confname : %s\n", conf_name.c_str());
  vout.general("kappa_ud = %f\n", kappa_ud);
  vout.general("kappa_s = %f\n", kappa_s);
  vout.general("Csw = %f\n",Csw);

  double eigen_prec, inv_prec;
  params_eigen.fetch_double("precision",eigen_prec);
  params_inversion.fetch_double("precision",inv_prec);

  vout.general("eigensolver prec = %16.8e\n",eigen_prec);
  vout.general("inversion prec = %16.8e\n",inv_prec);


  vout.general("===### main impl END ###===\n");
  return 0;
}
*/

//====================================================================
//============================================================END=====
